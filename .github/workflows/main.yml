# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches: [master]
  # pull_request:
  #   branches: [master]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - uses: actions/setup-ruby@v1
        with:
          ruby-version: "2.6"

      - name: Create api key file
        env:
          OPEN_DART_API_KEY: ${{ secrets.OPNE_DART_API_KEY }}
        run: echo "var dartOpenApiKey = '${OPEN_DART_API_KEY}';" > lib/widgets/api_key.dart

      - name: Create upload key file
        env:
          PLAY_STORE_UPLOAD_KEY: ${{ secrets.PLAY_STORE_UPLOAD_KEY }}
          PLAY_STORE_UPLOAD_KEY_INFO: ${{ secrets.PLAY_STORE_UPLOAD_KEY_INFO }}
          GOOGLE_SERVICE_ACCOUNT_JSON: ${{ secrets.GOOGLE_SERVICE_ACCOUNT_JSON }}
        run: |
          echo "${PLAY_STORE_UPLOAD_KEY}" | base64 --decode > android/app/upload_key.jks
          echo "${PLAY_STORE_UPLOAD_KEY_INFO}" | base64 --decode > android/key.properties
          echo "${GOOGLE_SERVICE_ACCOUNT_JSON}" | base64 --decode > android/google_service_account.json

      - name: Install Fastlane
        run: |
          cd android
          gem update --system
          bundle install

      - uses: subosito/flutter-action@v1
        with:
          channel: "stable"

      - name: build android release
        run: flutter build appbundle --build-number=${{ github.run_number }}

      - name: deploy to internal
        run: |
          cd android
          bundle exec fastlane deploy_internal
